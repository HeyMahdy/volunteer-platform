// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile? // One-to-One with Profile
}

model Profile {
  id        Int      @id @default(autoincrement())
  fullname  String
  bio       String?
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  skills    Skill[]
  causes    Cause[]
  events    Event[]
  history   VolunteerHistory?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String
  level     String
  profileId Int      @unique
  profile   Profile  @relation(fields: [profileId], references: [id])
}

model Cause {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  profileId   Int      @unique
  profile     Profile  @relation(fields: [profileId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  profileId   Int      @unique
  profile     Profile  @relation(fields: [profileId], references: [id])
  date        DateTime
  Category    String
  Availability Int
  location    String
  status      EventStatus @default(OPEN)
  volunteerRequests VolunteerRequest[]
  comments    Comments[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VolunteerRequest {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  EventId     Int
  event       Event     @relation(fields: [EventId], references: [id])
  time_left   DateTime
  urgency     Urgency   @default(HIGH) // Enum for urgency levels
}

model Comments {
  id          Int      @id @default(autoincrement())
  EventId     Int
  event       Event     @relation(fields: [EventId], references: [id])
  description String
}

model VolunteerHistory {
  id         Int      @id @default(autoincrement())
  profileId  Int      @unique
  profile    Profile  @relation(fields: [profileId], references: [id])
  event_name String
  event_date DateTime
}

enum EventStatus {
  OPEN
  CLOSED
  SOLD_OUT
  CANCELED
}

enum Urgency {
  HIGH
  MEDIUM
  LOW
}
